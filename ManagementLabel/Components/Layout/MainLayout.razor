@page "/main"
@inherits LayoutComponentBase
@inject CustomAuthStateProvider.MainRenderState _IsRendered
<div class="page">

    @if (_IsRendered.IsRendered)
    {
        <AuthorizeView>
            <Authorized>
                <div class="sidebar">
                    <NavMenu />
                </div>
            </Authorized>
        </AuthorizeView>
    }
    <main>
        <article class="content px-4">
            @if (!_IsRendered.IsRendered)
            {
                <div class="container">
                    <p>Loading... Please wait.</p>
                </div>
            }
            else
            {
                <AuthorizeView>
                    <Authorized>
                        <ManagementLabel.Components.Pages.EtikettBarcode />
                    </Authorized>
                    <NotAuthorized>
                        @if(!IsRegisterPage)
                        {
                            <ManagementLabel.Components.Pages.LogIn OnRegisterClicked="RegisterClicked" />
                        }
                        else
                        {
                            <ManagementLabel.Components.Pages.Register OnBackToLogin="BackToLoginClicked" />
                        }
                    </NotAuthorized>
                </AuthorizeView>
                @* @Body*@
            }
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private bool IsRegisterPage = false;

    private void RegisterClicked() => IsRegisterPage = true;
    private void BackToLoginClicked() => IsRegisterPage = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        IsRegisterPage = false;
        if (firstRender)
        {
            _IsRendered.IsRendered = true;

           /* if (AuthProvider is CustomAuthStateProvider customProvider1)
                await customProvider1.NotifyUserLogout();*/

            await AuthProvider.GetAuthenticationStateAsync();
			StateHasChanged();
        }
    }
}